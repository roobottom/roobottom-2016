{% import "./grid.pattern" as pattern %}
{% import "../modules/m_libraryBlock/m_libraryBlock.pattern" as eg %}

<div class="type">
{% markdown %}
Grids do all the heavy lifting layout work. A grid pattern accepts _n_ patterns that are wrapped as columns, an optional classes string, and an optional modifier that describes the layout of the grid. On smaller screen, all grid columns are stacked, one on top of another.
{% endmarkdown %}
</div>


<div class="type">
{% markdown %}
## Standard Grid
Passing two patterns into a grid will result in two equal width columns.
{% raw %}
```
pattern.grid([
  pattern,
  pattern
])
```
{% endraw %}
{% endmarkdown %}
</div>
{{
  pattern.grid([
    eg.m_libraryBlock('half column'),
    eg.m_libraryBlock('half column')
  ],classes='u_space__push')
}}

<div class="type">
{% markdown %}
## 2-1 Grid
A `2-1` modifier produces a grid twice as wide on the left, as it is on the right.
{% raw %}
```
pattern.grid([
  pattern,
  pattern
],'2-1')
```
{% endraw %}
{% endmarkdown %}
</div>
{{
  pattern.grid([
    eg.m_libraryBlock('double column'),
    eg.m_libraryBlock('auto')
  ],modifier='2-1',classes='u_space__push')
}}

<div class="type">
{% markdown %}
## 1-2 Grid
A `1-2` modifier produces a grid twice as wide on the right, as it is on the left.
{% raw %}
```
pattern.grid([
  pattern,
  pattern
],'1-2')
```
{% endraw %}
{% endmarkdown %}
</div>
{{
  pattern.grid([
    eg.m_libraryBlock('auto'),
    eg.m_libraryBlock('double column')
  ],modifier='1-2',classes='u_space__push')
}}

<div class="type">
{% markdown %}
## 1-3 Grid
A `1-3` modifier produces a grid three times as wide on the right, as it is on the left.
{% raw %}
```
pattern.grid([
  pattern,
  pattern
],'1-3')
```
{% endraw %}
{% endmarkdown %}
</div>
{{
  pattern.grid([
    eg.m_libraryBlock('auto'),
    eg.m_libraryBlock('triple column')
  ],modifier='1-3',classes='u_space__push')
}}

<div class="type">
{% markdown %}
## Prose
A `prose` modifier produces a grid column designed to set a sensible line length for articles.
{% raw %}
```
pattern.grid([
  pattern
],'prose')
```
{% endraw %}
{% endmarkdown %}
</div>
{{
  pattern.grid([
    eg.m_libraryBlock('Ready are you? What know you of ready? For _eight hundred years_ have I trained Jedi. My own counsel will I keep on who is to be trained. A Jedi must have the deepest commitment, the most serious mind. This one, a long time have I watched. All his life has he looked away… to the future, to the horizon. Never his mind on _where he was_. …Hmm? On _what he was doing_.', true)
  ],modifier='prose',classes='u_space__push')
}}

<div class="type">
{% markdown %}
## Bricks
A `bricks` modifier produces a grid that's designed to give 10n items a "brick wall" effect.
{% raw %}
```
pattern.grid([
  pattern,
  pattern,
  pattern,
  pattern,
  pattern,
  pattern,
  pattern,
  pattern,
  pattern,
  pattern
],'bricks')
```
{% endraw %}
{% endmarkdown %}
</div>
{{
  pattern.grid([
    eg.m_libraryBlock('brick'),
    eg.m_libraryBlock('brick'),
    eg.m_libraryBlock('brick'),
    eg.m_libraryBlock('brick'),
    eg.m_libraryBlock('brick'),
    eg.m_libraryBlock('brick'),
    eg.m_libraryBlock('brick'),
    eg.m_libraryBlock('brick'),
    eg.m_libraryBlock('brick'),
    eg.m_libraryBlock('brick')
  ],modifier='bricks',classes='u_space__push')
}}
